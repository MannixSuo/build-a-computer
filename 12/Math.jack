// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static int MAX_BYTE_LENGTH = 16;

    /** Initializes the library. */
    function void init() {
        do initTwoToArray();
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0)
        {
            return -x;
        }
        else
        {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum = 0;
        var int shiftedX = x;
        var int i = 0;
        while(i < MAX_BYTE_LENGTH)
        {
            if(bit(y,i))
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
       var int q;
       var int sign;
       if( y > x || y < 0)
       {
            return 0;
       }
       let q = divide(x,y+y);
       if ((x - multiply( q + q , y))<y)
       {
            return multiply(2,q);
       }
       else
       {
            return multiply(2,q) + 1;
       }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,n;
        let y = 0 ;
        let j = 0 ;
        let n = getN(x);
        while( j < divide(n,2) - 1 )
        {
            if(multiply(y + twoToThe[j],y + twoToThe[j]) <= x && multiply(y + twoToThe[j],y + twoToThe[j]) > 0)
            {
                y = y + twoToThe[j];
            }
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b)
        {
            return b;
        }
        else
        {
            return a;
        }
    }

    /** Return i-th bit of x if 1 return true */
    function boolean bit(int x,int i){
        var boolean result = false;
        var int n ;
        let n = MAX_BYTE_LENGTH - 1;
        while(n >= i)
        {
            if(x >= twoToThe[n])
            {
                let x = x - twoToThe[n];
                let result = true;
            }
            else
            {
                let result = false;
            }
            let n = n -1;
        }
        return result;
    }

    /** initialize the twoToThe array let twoToThe[i] = 2^i */
    function void initTwoToArray()
    {
        var int i = 0;
        var int v = 1;
        while(i < MAX_BYTE_LENGTH)
        {
            let twoToThe[i] = v;
            let v = v + v;
            let i = i + 1;
        }
    }

    /** return the minimum n which 2^n > x*/
    function int getN(int x)
    {
        var int i = 0 ;
        while( i < MAX_BYTE_LENGTH)
        {
            if(twoToThe[i] >= x){
                return i;
            }
            let i = i + 1;
        }
    }
}
