// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap,freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;  // heapBase
        let freeList = heap;
        let heap[0] = 0;  // next
        let heap[1] = 14334; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) 
    {
        var int returnBlock;
        var int currentBlock ;
        var int fit ;
        let fit = 0 ;
        let currentBlock = freeList;
        // currentBlock[0] != 0 || currentBlock[1] > szie + 2
        while(fit = 0)
        {
            // currentBlock[1] > size + 2
            if(Memory.peek(currentBlock + 1) > size + 2)
            {
                let fit = 1;
            }
            else
            {
                // currentBlock = currentBlock[0];
                let currentBlock = Memory.peek(currentBlock);
                if(Memory.peek(currentBlock) = 0)
                {
                    // fit != 1 and next node is 0 not find
                    if(~(fit = 1))
                    {
                        let fit = 2;
                    }
                }
            }
            
        }
        if(fit = 1)
        {
            let returnBlock = Memory.peek(currentBlock + 1) - size + currentBlock;
            // let returnBlock[1] = size;
            do Memory.poke(returnBlock,size);
            // let currentBlock[1] = currentBlock[1] - size - 2;
            do Memory.poke(returnBlock+1,Memory.peek(currentBlock + 1)-size -2);
            return returnBlock;
        }
        else
        {
            return 0;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
       return;
    }    
}
