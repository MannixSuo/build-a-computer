// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap,freeList;
    static int reserveMemorySpace;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;  // heapBase
        let freeList = heap;
        let heap[0] = 0;  // next
        let heap[1] = 14334; // length
        let reserveMemorySpace = 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int allocatedMemorySegmentAddress;
        var int previousFreeMemorySegmentAddress;
        var int nextFreeMemorySegmentAddress;
        var int remainderMemorySegmentAddress;

        let allocatedMemorySegmentAddress = freeList[0];
        let nextFreeMemorySegmentAddress = freeList[0];
        let previousFreeMemorySegmentAddress = freeList[0];


        // block[0] != 0
        while( ~(Memory.peek(allocatedMemorySegmentAddress) = 0))
        {
            // block[1] >= size+2
            if(~ (block[1] < (size+2) ))
            {
                let freeList =
            }
            else
            {
                let block = block[0];
            }
        }
        let remainderMemorySegmentAddress = allocatedMemorySegmentAddress + size;
        // make allocated memory segment has a size
        do Memory.poke(allocatedMemorySegmentAddress + 1, size );

        do Memory.poke(previousFreeMemorySegmentAddress,allocatedMemorySegmentAddress);
        let

       return 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
       return;
    }    
}
