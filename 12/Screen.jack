// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    field boolean color;
    field int memoriesEachYLine;
    field int pixelsEachMemory;
    field int baseScreenMapAddress;
    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let memoriesEachYLine = 32;
        let pixelsEachMemory = 16;
        let baseScreenMapAddress = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address ,value;
        let address = Screen.getPixelMemoryAddress(x,y);
        
        let value = Memory.peek(baseScreenMapAddress + address);
        if(color){
            let value = value + Screen.pow(2,Screen.xDivideYremainder(value,16));
        }else{
            let value = value - Screen.pow(2,Screen.xDivideYremainder(value,16));
        }
        do Memory.poke(address,value);
        return;
    }

    /** Return the memoryAdress which the pixel belong to
     *  memoryAdress = 32 * y + x / 16 */
    function int getPixelMemoryAddress(int x,int y){
        return memoriesEachYLine * y + Math.divide(x,pixelsEachMemory) 
    }

    /** return x % y*/
    function int xDivideYremainder(int x,int y){
        return x - Math.divide(x,y);
    }
    /**return x^y */
    function int pow(int x , int y){
        if(x = 0){
            return 0;
        }
        var int sum;
        let sum = 1;
        while(y > 1){
            let sum = Math.multiply(sum,x);
            let y = y - 1;
        }
        return sum;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
