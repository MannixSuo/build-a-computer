// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = 0;
        while(address < 6192){
            do Memory.poke(16384 + address , 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int memAddress,remain,divNum,memValue,bits;
        if((x>511)|(y>255)){
            do Sys.error(11);
        }
        let divNum = Math.divide(x,16);
        let memAddress = Math.multiply(y,32) + divNum + 16384;
        let remain = x - Math.multiply(divNum,16);
        let memValue = Memory.peek(memAddress);
        let bits = 1;
        while(remain>0){
            let bits = bits + bits;
            let remain = remain - 1;
        }
        if(color){
            let memValue = (memValue|bits);
        }else{
            let bits = ~bits;
            let memValue = (memValue&bits);
        }
        do Memory.poke(memAddress,memValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx , dy,absDx,absDy;
        var int a,b,adyMinusbdx;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let absDx = Math.abs(dx);
        let absDy = Math.abs(dy);
        let a = 0;
        let b = 0;
        if(dy = 0){
            while(~(a > absDx)){
                if(dx>0){
                    do Screen.drawPixel( x1 + a,y1);
                }else{
                    do Screen.drawPixel( x1 - a,y1);
                }
                    let a = a + 1;
                }
            return;
        }
        if(dx = 0){
            while(~(b> absDy)){
                if(dy>0){
                    do Screen.drawPixel(x1,y1+b);
                }else{
                    do Screen.drawPixel(x1,y1-b);
                }
                let b= b+ 1;
            }
            return;
        }

        if((dx>0)&(dy>0))
        {
            let adyMinusbdx = 0;
            // while a<=dx and b <= dy
            while((~(a>absDx))&(~(b>absDy)))
            {
                do Screen.drawPixel(x1+a,y1+b);
                if(adyMinusbdx<0)
                {
                    let adyMinusbdx = adyMinusbdx + dy;
                    let a = a + 1;
                }
                else
                {
                    let adyMinusbdx = adyMinusbdx - dx;
                    let b = b + 1;
                }
            }
             return;
        }

        if((dx<0)&(dy<0))
        {
            let adyMinusbdx = 0;
            while((~(a>absDx))&(~(b>absDy)))
            {
                do Screen.drawPixel(x2+a,y2+b);
                if(adyMinusbdx<0)
                {
                    let adyMinusbdx = adyMinusbdx - dy;
                    let a = a + 1;
                }
                else
                {
                    let adyMinusbdx = adyMinusbdx + dx;
                    let b = b + 1;
                }
            }
             return;
        }

        if((dx>0)&(dy<0))
        {
            let adyMinusbdx = 0;
            while((~(a>absDx))&(~(b>absDy)))
            {
                do Screen.drawPixel(x1+a,y1-b);
                if(adyMinusbdx<0)
                {
                    let adyMinusbdx = adyMinusbdx - dy;
                    let a = a + 1;
                }
                else
                {
                    let adyMinusbdx = adyMinusbdx - dx;
                    let b = b + 1;
                }
            }
             return;
        }

        if((dx<0)&(dy>0))
        {
            let adyMinusbdx = 0;
            while((~(a>absDx))&(~(b>absDy)))
            {
                do Screen.drawPixel(x2+a,y2-b);
                if(adyMinusbdx<0)
                {
                    let adyMinusbdx = adyMinusbdx + dy;
                    let a = a + 1;
                }
                else
                {
                    let adyMinusbdx = adyMinusbdx + dx;
                    let b = b + 1;
                }
            }
             return;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        let dy = y1;
        while(~(dy>y2)){
            do Screen.drawLine(x1,dy,x2,dy);
            let dy = dy + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,x1,cy,x2,powR,powDy,sqrNum,distance;
        let dy = -r;
        let powR = Math.multiply(r,r);
        if(r>181){
            do Sys.error(181);
        }
        while(~(dy > r)){
            let powDy = Math.multiply(dy,dy);
            let distance = powR - powDy;
            if(distance<0){
                do Output.printInt(dy);
            }
            let sqrNum = Math.sqrt(distance);
            let x1 = x - sqrNum;
            let cy = y + dy;
            let x2 = x + sqrNum;
            do Screen.drawLine(x1,cy,x2,cy);
            let dy = dy + 1;
        }
        return;
    }
}
